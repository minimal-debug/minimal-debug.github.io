---
export interface Props {
    dir: string;
}

const { dir } = Astro.props;
const papers = await Astro.glob("/src/content/docs/papers/Papers/*.mdx");

function getTagColor(tag: string) {
    // Simple hash function to turn string into number
    let hash = 0;
    for (let i = 0; i < tag.length; i++) {
        hash = tag.charCodeAt(i) + ((hash << 5) - hash);
        hash = hash & hash; // 32-bit integer
    }

    const goldenAngle = 137.508;
    const hue = Math.abs(hash * goldenAngle) % 360;

    const saturation = 60; 
    const lightness = 85; 

    return `--tag-bg-color: hsl(${hue}, ${saturation}%, ${lightness}%); 
--tag-border-color: hsl(${hue}, ${saturation - 10}%, ${lightness - 5}%); 
--tag-text-color: hsl(${hue}, ${saturation - 30}%, ${lightness - 60}%);`;
}


// Sort the papers array from newest to oldest based on the 'date' frontmatter field
const sortedPapers = papers.sort((a, b) => {
    const dateA = new Date(a.frontmatter.pub_date);
    const dateB = new Date(b.frontmatter.pub_date);
    return dateB - dateA;
});
---

<div class="table-container">
    <table class="sl-table">
        <thead>
            <tr>
                <th>Paper Title</th>
                <th>Tags</th>
            </tr>
        </thead>
        <tbody>
            {
                sortedPapers.map(
                    (paper) =>
                        !paper.file.endsWith("overview.mdx") && (
                            <tr>
                                <td>
                                    <a
                                        href={`/papers/papers/${paper.file.split("/").pop()?.replace(".mdx", "")}`}
                                    >
                                        {paper.frontmatter.title}
                                    </a>
                                </td>
                                <td>
                                    <div class="tags-container">
                                        {paper.frontmatter.tags?.map(
                                            (tag: string) => (
                                                <span
                                                    class="tag-pill"
                                                    style={getTagColor(tag)}
                                                >
                                                    {tag}
                                                </span>
                                            ),
                                        )}
                                    </div>
                                </td>
                            </tr>
                        ),
                )
            }
        </tbody>
    </table>
</div>

<style>
    .tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem; /* Spacing between tags */
    }

    .tag-pill {
        display: inline-block;
        padding: 0.25rem 0.6rem;
        border-radius: 9999px; /* Creates the pill shape */
        font-size: 0.75rem;
        font-weight: 500;
        line-height: 1.2;
        white-space: nowrap;

        /* Use the CSS variables generated by the function */
        background-color: var(--tag-bg-color);
        border: 1px solid var(--tag-border-color);
        color: var(--tag-text-color);
    }

    /* Ensures the table can scroll horizontally on small screens */
    .table-container {
        width: 100%;
        overflow-x: auto;
    }
</style>
